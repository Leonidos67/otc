import React, { useState, useRef, useEffect } from 'react';
import './ProfileEditModal.css';

const ProfileEditModal = ({ isOpen, onClose, onSave }) => {
  const [activeTab, setActiveTab] = useState('photo');
  const [selectedBackground, setSelectedBackground] = useState(() => 
    localStorage.getItem('profile_background') || 'none'
  );
  const [selectedEmoji, setSelectedEmoji] = useState(() => 
    localStorage.getItem('profile_emoji') || 'üòä'
  );
  const [uploadedPhoto, setUploadedPhoto] = useState(() => 
    localStorage.getItem('profile_custom_photo') || null
  );
  const [isDragOver, setIsDragOver] = useState(false);
  const fileInputRef = useRef(null);
  const menuRef = useRef(null);
  const indicatorRef = useRef(null);

  // –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ–Ω—ã
  const backgrounds = [
    { id: 'none', name: '–ë–µ–∑ —Ñ–æ–Ω–∞', color: 'transparent' },
    { id: 'gradient1', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 1', gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' },
    { id: 'gradient2', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 2', gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' },
    { id: 'gradient3', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 3', gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)' },
    { id: 'gradient4', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 4', gradient: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)' },
    { id: 'gradient5', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 5', gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)' },
    { id: 'gradient6', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç 6', gradient: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)' },
    { id: 'dark', name: '–¢–µ–º–Ω—ã–π', color: '#1a1a1a' },
    { id: 'purple', name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', color: '#6366f1' },
    { id: 'blue', name: '–°–∏–Ω–∏–π', color: '#3b82f6' },
    { id: 'green', name: '–ó–µ–ª–µ–Ω—ã–π', color: '#10b981' },
    { id: 'red', name: '–ö—Ä–∞—Å–Ω—ã–π', color: '#ef4444' }
  ];

  // –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
  const emojis = [
    'üòä', 'üòé', 'ü§î', 'üòç', 'ü•∞', 'üòò', 'üòã', 'üòú', 'ü§™', 'üòè',
    'üòå', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑',
    'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üëª',
    'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ',
    'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üêµ', 'üêí', 'ü¶ç', 'ü¶ß', 'üê∂',
    'üêï', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üê©', 'üê∫', 'ü¶ä', 'ü¶ù', 'üê±', 'üêà', 'ü¶Å',
    'üêØ', 'üêÖ', 'üêÜ', 'üê¥', 'üêé', 'ü¶Ñ', 'ü¶ì', 'ü¶å', 'üêÆ', 'üêÇ',
    'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó', 'üêΩ', 'üêë', 'üêê', 'üê™', 'üê´',
    'ü¶ô', 'ü¶í', 'üêò', 'ü¶è', 'ü¶õ', 'üê≠', 'üêÅ', 'üêÄ', 'üêπ', 'üê∞',
    'üêá', 'üêøÔ∏è', 'ü¶î', 'ü¶á', 'üêª', 'üê®', 'üêº', 'ü¶•', 'ü¶¶', 'ü¶°'
  ];

  const handleFileUpload = (file) => {
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const photoDataUrl = e.target.result;
        setUploadedPhoto(photoDataUrl);
        localStorage.setItem('profile_custom_photo', photoDataUrl);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      handleFileUpload(files[0]);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleFileInputChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      handleFileUpload(file);
    }
  };

  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–µ–Ω—é
  useEffect(() => {
    if (!menuRef.current) return;
    const buttons = menuRef.current.querySelectorAll(".profile-edit-modal-menu-item");

    const moveIndicator = (el) => {
      if (indicatorRef.current && el) {
        indicatorRef.current.style.width = `${el.offsetWidth}px`;
        indicatorRef.current.style.left = `${el.offsetLeft}px`;
      }
    };

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      const activeEl = menuRef.current.querySelector(".active");
      if (activeEl) {
        moveIndicator(activeEl);
      }
    }, 100);

    buttons.forEach((btn) => {
      const handleMouseEnter = () => moveIndicator(btn);
      const handleMouseLeave = () => moveIndicator(menuRef.current.querySelector(".active"));

      btn.addEventListener("mouseenter", handleMouseEnter);
      btn.addEventListener("mouseleave", handleMouseLeave);

      btn.cleanup = () => {
        btn.removeEventListener("mouseenter", handleMouseEnter);
        btn.removeEventListener("mouseleave", handleMouseLeave);
      };
    });

    return () => buttons.forEach((btn) => btn.cleanup());
  }, [activeTab]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen && menuRef.current && indicatorRef.current) {
      setTimeout(() => {
        const activeEl = menuRef.current.querySelector(".active");
        if (activeEl && indicatorRef.current) {
          indicatorRef.current.style.width = `${activeEl.offsetWidth}px`;
          indicatorRef.current.style.left = `${activeEl.offsetLeft}px`;
        }
      }, 200);
    }
  }, [isOpen]);

  const handleSave = () => {
    localStorage.setItem('profile_background', selectedBackground);
    localStorage.setItem('profile_emoji', selectedEmoji);
    if (uploadedPhoto) {
      localStorage.setItem('profile_custom_photo', uploadedPhoto);
    }
    if (onSave) {
      onSave(selectedBackground, selectedEmoji, uploadedPhoto);
    }
    onClose();
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'photo':
        return (
          <div className="profile-edit-section">
            <h3>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</h3>
            {uploadedPhoto ? (
              <div>
                <img src={uploadedPhoto} alt="Preview" className="photo-preview" />
                <div style={{ textAlign: 'center', marginTop: '16px' }}>
                  <button 
                    className="profile-edit-modal-button secondary"
                    onClick={() => {
                      setUploadedPhoto(null);
                      localStorage.removeItem('profile_custom_photo');
                    }}
                  >
                    –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
                  </button>
                </div>
              </div>
            ) : (
              <div
                className={`photo-upload-area ${isDragOver ? 'dragover' : ''}`}
                onClick={() => fileInputRef.current?.click()}
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
              >
                <div className="photo-upload-icon">üì∑</div>
                <div className="photo-upload-text">–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ</div>
                <div className="photo-upload-subtext">PNG, JPG –¥–æ 5MB</div>
              </div>
            )}
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileInputChange}
              className="photo-upload-input"
            />
          </div>
        );
      case 'emoji':
        return (
          <>
            <div className="profile-edit-section">
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω:</h3>
              <div className="background-grid">
                {backgrounds.map((bg) => (
                  <button
                    key={bg.id}
                    className={`background-option ${selectedBackground === bg.id ? 'selected' : ''}`}
                    onClick={() => setSelectedBackground(bg.id)}
                    style={{
                      background: bg.gradient || bg.color,
                      border: selectedBackground === bg.id ? '2px solid #4ade80' : '1px solid #333'
                    }}
                    title={bg.name}
                  >
                    {bg.name}
                  </button>
                ))}
              </div>
            </div>

            <div className="profile-edit-section">
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:</h3>
              <div className="emoji-grid">
                {emojis.map((emoji) => (
                  <button
                    key={emoji}
                    className={`emoji-option ${selectedEmoji === emoji ? 'selected' : ''}`}
                    onClick={() => setSelectedEmoji(emoji)}
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            </div>
          </>
        );
      default:
        return null;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="profile-edit-modal-overlay" onClick={onClose}>
      <div className="profile-edit-modal-content" onClick={(e) => e.stopPropagation()}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
        <div className="profile-edit-modal-header">
          <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h2>
          <button className="profile-edit-modal-close" onClick={onClose}>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M18 6L6 18M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* –ú–µ–Ω—é */}
        <div className="profile-edit-modal-menu" ref={menuRef}>
          <button
            className={`profile-edit-modal-menu-item ${activeTab === 'photo' ? 'active' : ''}`}
            onClick={() => setActiveTab('photo')}
          >
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
          </button>
          <button
            className={`profile-edit-modal-menu-item ${activeTab === 'emoji' ? 'active' : ''}`}
            onClick={() => setActiveTab('emoji')}
          >
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏
          </button>
          <div className="hover-indicator" ref={indicatorRef} />
        </div>
        
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="profile-edit-modal-divider" />

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
        <div className="profile-edit-modal-body">
          {renderTabContent()}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="profile-edit-modal-footer">
          <button 
            className="profile-edit-modal-button secondary"
            onClick={onClose}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            className="profile-edit-modal-button primary"
            onClick={handleSave}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProfileEditModal;