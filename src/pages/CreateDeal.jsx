import React, { useState } from 'react';
import { tonConnect } from '../utils/ton/tonConnect';
import { Link } from 'react-router-dom';
import './PageStyles.css';
import { useTonWallet } from '@tonconnect/ui-react';
import { gifts } from "../data/gifts";

const CreateDeal = () => {
  return (
    <div className="p-6 profile-page">
      <h1 className="profile-page-title" style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <Link to="/deals" className="back-link" aria-label="–ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M15 18l-6-6 6-6" />
          </svg>
        </Link>
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
      </h1>
      <hr className="divider" style={{ marginTop: '8px' }} />

      <DealSteps />
    </div>
  );
};

export default CreateDeal;

// –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
const DealSteps = () => {
  const [step, setStep] = useState(1);
  const [method, setMethod] = useState(null);
  const [gift, setGift] = useState(null);
  const uiWallet = useTonWallet();

  return (
    <>
      <div className="step-banner">
        <div className="step-header">
          <div className="step-title">{`–®–∞–≥ #${step}`}</div>
          <div className="progress">
            <div className="progress-track">
              <div className="progress-fill" style={{ width: `${(step / 4) * 100}%` }} />
            </div>
          </div>
        </div>
      </div>

      <div className="grid" style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 12 }}>
        {step === 1 && (
          <MethodSelection
            method={method}
            onChange={(value) => { setMethod(value); setStep(2); }}
          />
        )}

        {step === 2 && (
          <div style={{ margin: 0 }}>
            <h3 className="profile-page-title" style={{ marginBottom: 8 }}>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
            <div className="input-group">
              <label>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:</label>
              <input type="number" placeholder="0" />
            </div>
          </div>
        )}

        {step === 3 && (
          <GiftSelection gift={gift} onChange={(value) => setGift(value)} />
        )}

        {step === 4 && (
          <div style={{ margin: 0 }}>
            <h3 className="profile-page-title" style={{ marginBottom: 8 }}>–£—Å–ª–æ–≤–∏—è</h3>
            <div className="input-group">
              <label>–ú–∏–Ω. —Å—É–º–º–∞</label>
              <input type="number" placeholder="0" />
            </div>
            <div className="input-group">
              <label>–ú–∞–∫—Å. —Å—É–º–º–∞</label>
              <input type="number" placeholder="0" />
            </div>
            <div className="input-group">
              <label>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã</label>
              <input type="number" placeholder="15 –º–∏–Ω" />
            </div>
          </div>
        )}
      </div>

      {step > 1 && (
        <div style={{ marginTop: 12, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <button
            type="button"
            className="arrow-btn"
            onClick={() => setStep((s) => Math.max(1, s - 1))}
            aria-label="–ù–∞–∑–∞–¥"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M15 18l-6-6 6-6" />
            </svg>
            –ù–∞–∑–∞–¥
          </button>

          <button
            type="button"
            className="arrow-btn"
            onClick={() => {
              // –ü—Ä–æ–≤–µ—Ä–∫–∏
              if (step === 2) {
                const card = localStorage.getItem('payment_card_number') || '';
                const walletAddr = (localStorage.getItem('wallet_address') || '').trim();
                const uiConnected = Boolean(uiWallet && uiWallet.account && uiWallet.account.address);
                const sdkConnected = Boolean(tonConnect && tonConnect.account && tonConnect.account.address);
                const wallet = Boolean(walletAddr) || uiConnected || sdkConnected;
                if (method === '–ù–∞ –∫–∞—Ä—Ç—É' && !card.trim()) {
                  const go = window.confirm('–î–ª—è –ø—Ä–∏—ë–º–∞ –Ω–∞ –∫–∞—Ä—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É. –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤?');
                  if (go) window.location.href = '/profile?tab=payments';
                  return;
                }
                if (method === 'TON-–∫–æ—à–µ–ª–µ–∫' && !wallet) {
                  const go = window.confirm('–î–ª—è –ø—Ä–∏—ë–º–∞ –Ω–∞ TON-–∫–æ—à–µ–ª—ë–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫. –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?');
                  if (go) window.location.href = '/profile?tab=payments';
                  return;
                }
              }
              setStep((s) => Math.min(4, s + 1));
            }}
            aria-label="–î–∞–ª—å—à–µ"
            disabled={step === 4}
          >
            –î–∞–ª—å—à–µ
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M9 18l6-6-6-6" />
            </svg>
          </button>
        </div>
      )}
    </>
  );
};

const MethodSelection = ({ method, onChange }) => {
  const [error, setError] = useState("");
  const uiWallet = useTonWallet();
  const options = [
    { key: 'TON-–∫–æ—à–µ–ª–µ–∫', label: 'TON-–∫–æ—à–µ–ª–µ–∫' },
    { key: '–ù–∞ –∫–∞—Ä—Ç—É', label: '–ù–∞ –∫–∞—Ä—Ç—É' },
    { key: '–ó–≤–µ–∑–¥—ã', label: '–ó–≤–µ–∑–¥—ã' },
  ];

  return (
    <div style={{ margin: 0 }}>
      <h3 className="profile-page-title" style={{ marginBottom: 8 }}>–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:</h3>
      <div className="method-cards">
        {options.map((opt) => (
          <button
            key={opt.key}
            type="button"
            className={`method-card ${method === opt.key ? 'selected' : ''}`}
            onClick={() => {
              if (opt.key === '–ù–∞ –∫–∞—Ä—Ç—É') {
                const card = localStorage.getItem('payment_card_number') || '';
                if (!card.trim()) {
                  setError(
                    <>
                      –î–ª—è –ø—Ä–∏—ë–º–∞ –Ω–∞ –∫–∞—Ä—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <a href="/profile?tab=payments" style={{ color: 'inherit', textDecoration: 'underline' }}>–ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É</a> –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
                    </>
                  );
                  return;
                }
              }
              if (opt.key === 'TON-–∫–æ—à–µ–ª–µ–∫') {
                const walletAddr = (localStorage.getItem('wallet_address') || '').trim();
                const uiConnected = Boolean(uiWallet && uiWallet.account && uiWallet.account.address);
                const sdkConnected = Boolean(tonConnect && tonConnect.account && tonConnect.account.address);
                const wallet = Boolean(walletAddr) || uiConnected || sdkConnected;
                if (!wallet) {
                  setError(
                    <>
                      <a href="/profile?tab=payments" style={{ color: 'inherit', textDecoration: 'underline' }}>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ</a>
                      {" "}TON-–∫–æ—à–µ–ª—ë–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Connect Wallet.
                    </>
                  );
                  return;
                }
              }
              setError('');
              onChange(opt.key);
            }}
          >
            <span className="method-title">{opt.label}</span>
          </button>
        ))}
      </div>
      {error && <div className="error-text" style={{ marginTop: 8 }}>{error}</div>}
    </div>
  );
};

const GiftSelection = ({ gift, onChange }) => {
  const [search, setSearch] = useState("");

  const filteredGifts = gifts.filter((g) =>
    g.title.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <h3 className="profile-page-title" style={{ marginBottom: 8 }}>
        –í—ã–±–µ—Ä–∏—Ç–µ NFT –ø–æ–¥–∞—Ä–æ–∫:
      </h3>

      {/* –ü–æ–∏—Å–∫ */}
      <input
        type="text"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        style={{
          width: "100%",
          marginBottom: 12,
          padding: "12px 14px", // üëà –≤—ã—à–µ –∑–∞ —Å—á—ë—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –ø–∞–¥–¥–∏–Ω–≥–∞
          borderRadius: 8,
          border: "1px solid #333",
          background: "#000",
          fontSize: 16, // üëà —Ç–µ–∫—Å—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
          color: "#fff" // üëà —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª —á–∏—Ç–∞–µ–º—ã–º –Ω–∞ —á—ë—Ä–Ω–æ–º —Ñ–æ–Ω–µ
        }}
      />

      
      {/* –°–µ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ */}
      <div className="gift-grid" style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(120px, 1fr))", gap: 16 }}>
        {filteredGifts.map((g) => (
          <div
            key={g.id}
            className="gift-card"
            style={{
              position: "relative",
              background: "#000",
              borderRadius: 12,
              padding: 12,
              textAlign: "center",
              cursor: "pointer",
              boxShadow: gift === g.id ? "0 0 0 2px #333 inset" : "0 0 0 1px #000 inset"
            }}
            onClick={() => onChange(g.id)}
          >
            {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ */}
            <img
              src={g.img}
              alt={g.title}
              style={{ width: 80, height: 80, borderRadius: 8, marginBottom: 8 }}
            />
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
            <div>{g.title}</div>

            {/* –ì–∞–ª–æ—á–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ */}
            {gift === g.id && (
              <div style={{ position: "absolute", top: 8, right: 8, background: "#fff", borderRadius: "50%" }}>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="black" viewBox="0 0 24 24">
                  <path d="M20.285 6.709l-11.285 11.291-5.285-5.291 1.414-1.414 3.871 3.877 9.871-9.877z"/>
                </svg>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
